@page "/"
@inject IConfiguration Config
@{
    ViewData["Title"] = "GECどっちでSHOW - ホスト";
    var joinUrl = Config["JoinUrl"] ?? "http://192.168.10.2:8080/vote";
}
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>@ViewData["Title"]</title>

    <!-- 外部CSS（wwwroot/css/index.css） -->
    <link rel="stylesheet" href="~/css/index.css" asp-append-version="true" />

    <script src="~/lib/signalr/signalr.min.js"></script>
    <script src="~/lib/qrious/qrious.min.js"></script>
</head>
<body>
    <header>
        <div class="brand">GECどっちでSHOW - ホスト画面</div>
        <div style="display:flex;gap:8px;flex-wrap:wrap">
            <button id="show-qr-modal" class="btn">QR</button>
            <button id="start-voting" class="btn btn-start">回答開始</button>
            <button id="stop-voting" class="btn btn-stop" style="display:none;">回答終了</button>
            <button id="show-result" class="btn btn-result" style="display:none;">回答一覧</button>
            <button id="prev" class="btn">前の問題</button>
            <button id="next" class="btn">次の問題</button>
            <button id="reset" class="btn">リセット</button>
        </div>
    </header>

    <div class="container">
        <div class="card">
            <div style="display:flex;justify-content:space-between;align-items:center;">
                <div>
                    <div class="muted">問題 <span id="q-num">1</span></div>
                    <h2 id="q-title" style="margin:6px 0 12px;">読み込み中…</h2>
                </div>
                <div style="text-align:right;">
                    <div class="muted">ステータス</div>
                    <div id="voting-status">
                        <span class="status-indicator status-closed"></span>
                        <span>回答受付停止中</span>
                    </div>
                    <div id="timer" class="timer" style="display:none;">0秒</div>
                </div>
            </div>
            <div id="opts" class="grid"></div>
        </div>

        <div class="card">
            <div class="muted">参加者一覧（チーム名）</div>
            <div id="participants"><p class="muted">まだ参加者がいません</p></div>
        </div>

        <div class="card">
            <div class="muted">参加者の回答状況（この問題）</div>
            <div id="client-status"><p class="muted">まだ回答がありません</p></div>
        </div>

        <div class="card">
            <div class="muted">途中経過（合計）</div>
            <div id="interim-totals"><p class="muted">回答終了後に更新されます</p></div>
        </div>

        <div class="card">
            <div class="muted">問題別結果</div>
            <div id="question-results"><p class="muted">回答終了後に表示されます</p></div>
        </div>
    </div>

    <!-- 最終結果モーダル -->
    <div id="final-results-modal" style="display:none;position:fixed;inset:0;background:rgba(0,0,0,.8);z-index:1000;">
        <div style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#fff;padding:32px;border-radius:16px;max-width:800px;width:90%;max-height:80vh;overflow-y:auto;">
            <h2>最終結果（同点は合計時間の短い方が上位）</h2>
            <div id="final-results-content"></div>
            <button onclick="document.getElementById('final-results-modal').style.display='none'" class="btn" style="margin-top:16px;">閉じる</button>
        </div>
    </div>

    <!-- QRコードモーダル -->
    <div id="qr-modal" style="display:none;position:fixed;inset:0;background:rgba(0,0,0,.8);z-index:1000;">
        <div style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#fff;padding:32px;border-radius:16px;max-width:500px;width:90%;">
            <h2 style="margin-top:0;">参加用QRコード</h2>
            <div style="text-align:center;margin:24px 0;"><canvas id="qr" width="250" height="250"></canvas></div>
            <div style="text-align:center;margin:16px 0;">
                <div style="color:#666;font-size:14px;margin-bottom:8px;">参加URL</div>
                <div style="background:#f3f4f6;padding:12px;border-radius:8px;word-break:break-all;">
                    <a id="join-link" href="@joinUrl" target="_blank" style="color:#22c55e;font-weight:600;text-decoration:none;">@joinUrl</a>
                </div>
            </div>
            <div style="display:flex;gap:8px;margin-top:24px;">
                <button id="edit-url" class="btn" style="flex:1;">URLを変更</button>
                <button onclick="document.getElementById('qr-modal').style.display='none'" class="btn" style="flex:1;background:linear-gradient(90deg,#22c55e,#16a34a);color:#fff;border:none;">閉じる</button>
            </div>
        </div>
    </div>

    <!-- 回答一覧モーダル（クライアントにも同内容を配信） -->
    <div id="answer-list-modal" style="display:none;position:fixed;inset:0;background:rgba(0,0,0,.8);z-index:1000;">
        <div style="position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);background:#fff;padding:32px;border-radius:16px;max-width:800px;width:90%;max-height:80vh;overflow-y:auto;">
            <h2 id="answer-list-title" style="margin-top:0;margin-bottom:8px;">回答一覧</h2>
            <div id="answer-list-question" style="color:#666;margin-bottom:20px;font-size:18px;font-weight:600;"></div>
            <div id="answer-list-content" style="margin-bottom:24px;"></div>
            <div style="display:flex;gap:8px;justify-content:flex-end;">
                <button id="close-answer-list" class="btn" style="background:#6b7280;color:#fff;border:none;">閉じる</button>
            </div>
        </div>
    </div>

    <script>
        // const conn=new signalR.HubConnectionBuilder().withUrl("/hub/vote",{transport:signalR.HttpTransportType.LongPolling}).withAutomaticReconnect().build();
        const conn=new signalR.HubConnectionBuilder()
        .withUrl("/hub/vote",{
            transport:signalR.HttpTransportType.WebSockets,
        })
        .withAutomaticReconnect()
        .build();

        const qTitle=document.getElementById('q-title');
        const qNum=document.getElementById('q-num');
        const optsDiv=document.getElementById('opts');
        const clientStatusDiv=document.getElementById('client-status');
        const participantsDiv=document.getElementById('participants');
        const questionResultsDiv=document.getElementById('question-results');
        const votingStatusDiv=document.getElementById('voting-status');
        const timerDiv=document.getElementById('timer');
        const answerBtn=document.getElementById('show-result');
        const startBtn=document.getElementById('start-voting');
        const stopBtn=document.getElementById('stop-voting');
        const prevBtn=document.getElementById('prev');
        const nextBtn=document.getElementById('next');
        const interimDiv=document.getElementById('interim-totals');

        let currentState=null, questionResults={}, joinUrl="@joinUrl", qr=null;

        // 受付/確定フラグ（表示制御の一元管理）
        let isVotingOpenFlag=false;
        let hasSnapshotForThisQuestion=false;

        // タイマー（表示用）
        let timerInterval=null, timerStartMs=0;
        function startTimer(){ if(timerInterval) return; timerStartMs=Date.now(); timerDiv.style.display='block'; timerDiv.textContent='0秒';
          timerInterval=setInterval(()=>{ const sec=Math.floor((Date.now()-timerStartMs)/1000); timerDiv.textContent=`${sec}秒`; },200); }
        function stopTimer(){ if(!timerInterval) return; clearInterval(timerInterval); timerInterval=null; timerDiv.style.display='none'; timerDiv.textContent='0秒'; }

        // QR
        const joinLink=document.getElementById('join-link');
        const qrModal=document.getElementById('qr-modal');
        const showQrModalBtn=document.getElementById('show-qr-modal');
        joinLink.textContent=joinUrl; joinLink.href=joinUrl;
        showQrModalBtn.onclick=()=>{ if(!qr) qr=new QRious({element:document.getElementById('qr'),value:joinUrl,size:250}); qrModal.style.display='block'; };
        qrModal.onclick=e=>{ if(e.target===qrModal) qrModal.style.display='none'; };
        document.getElementById('edit-url').onclick=()=>{ const v=prompt("参加URLを入力",joinUrl)||joinUrl; joinUrl=v; if(qr) qr.set({value:joinUrl}); joinLink.textContent=joinUrl; joinLink.href=joinUrl; };

        /* ===== 「回答一覧/最終結果」ボタン表示制御 ===== */
        function refreshAnswerBtn(){
          if(!answerBtn || !currentState) return;
          const idx=currentState.currentIndex||0;
          const total=currentState.totalQuestions||1;
          const isLast = idx===total-1;

          // 表示条件：受付停止中 かつ スナップショット有り
          const shouldShow = (!isVotingOpenFlag && hasSnapshotForThisQuestion);
          answerBtn.style.display = shouldShow ? 'inline-block' : 'none';
          answerBtn.disabled = false;

          if(isLast){
            answerBtn.textContent='最終結果';
            answerBtn.title = shouldShow ? '' : '最後の問題を「回答終了」してから表示できます';
            answerBtn.onclick=()=>conn.invoke('GetGameResults');
          }else{
            answerBtn.textContent='回答一覧';
            answerBtn.title = shouldShow ? '' : 'この問題を「回答終了」してから表示できます';
            answerBtn.onclick=()=>conn.invoke('ShowQuestionResults');
          }
        }

        /* ===== Hub受信 ===== */
        conn.on("StateUpdated", s=>{
          currentState=s;
          // フラグ更新
          isVotingOpenFlag = !!s.isVotingOpen;
          hasSnapshotForThisQuestion = !!questionResults[s.currentIndex||0];
          render(s);
          refreshAnswerBtn();
        });

        conn.on("ParticipantsUpdated", list=> displayParticipants(list||[]));

        conn.on("VotingStatusChanged", isOpen=>{
          isVotingOpenFlag = !!isOpen;
          if(isOpen){
            startBtn.style.display='none'; stopBtn.style.display='inline-block';
            votingStatusDiv.innerHTML='<span class="status-indicator status-open"></span><span>回答受付中</span>';
            startTimer();
            startBtn.disabled = false;
          }else{
            startBtn.style.display='inline-block'; stopBtn.style.display='none';
            votingStatusDiv.innerHTML='<span class="status-indicator status-closed"></span><span>回答受付停止中</span>';
            stopTimer();
            stopBtn.disabled = false;
          }
          nextBtn.disabled = !!isOpen;
          prevBtn.disabled = !!isOpen;
          refreshAnswerBtn();
        });

        conn.on("QuestionResults",(index,results)=>{
          questionResults[index]=results;
          if(currentState && index===(currentState.currentIndex||0)) hasSnapshotForThisQuestion=true;
          displayQuestionResults(index,results);
          refreshAnswerBtn();
        });

        conn.on("GameResults", results=> displayFinalResults(results));

        conn.on("ShowPerQuestionResults",(index,rows)=>{
          if(currentState && index===(currentState.currentIndex||0)) hasSnapshotForThisQuestion=true;

          const modal=document.getElementById('answer-list-modal');
          const qDiv=document.getElementById('answer-list-question');
          const cDiv=document.getElementById('answer-list-content');
          const title=(currentState?.question?.title)||`問題${index+1}`;

          const groups={A:[],B:[]};
          (rows||[]).forEach(r=>{
            const opt=(r.selectedOption||r.SelectedOption||'-').toUpperCase();
            const team=(r.teamName||r.TeamName||'').trim();
            const mul=r.multiplier||r.Multiplier||1;
            if(!team) return;
            if(opt==='A'||opt==='B') groups[opt].push({team,mul});
          });
          const countA=groups.A.length, countB=groups.B.length;

          document.getElementById('answer-list-title').textContent=`回答一覧（A: ${countA}チーム / B: ${countB}チーム）`;
          qDiv.textContent=title;

          let html='';
          ['A','B'].forEach(opt=>{
            const list=groups[opt];
            html+=`
              <div style="margin-bottom:20px;padding:16px;background:#f9fafb;border-radius:8px;">
                <div style="font-size:18px;font-weight:700;color:#111;margin-bottom:12px;">
                  選択肢 ${opt} <span style="font-weight:400;color:#666;">(${list.length}件)</span>
                </div>
                <div style="display:flex;flex-wrap:wrap;gap:8px;">
                  ${list.map(x=>`
                    <div style="padding:8px 12px;background:#fff;border:1px solid #e5e7eb;border-radius:6px;">
                      <span style="font-weight:600;">${x.team}</span>
                      <span style="color:#666;margin-left:8px;">×${x.mul}</span>
                    </div>`).join('') || `<div class="no-vote">回答なし</div>`}
                </div>
              </div>`;
          });
          cDiv.innerHTML=html;
          modal.style.display='block';
          refreshAnswerBtn();
        });
        conn.on("ClosePerQuestionResults",()=>{
          document.getElementById('answer-list-modal').style.display='none';
          refreshAnswerBtn();
        });

        conn.on("VoteDeleted", ()=>{ conn.invoke("GetState"); });

        conn.on("InterimTotalsUpdated", list=>{
          if(!list || list.length===0){
            interimDiv.innerHTML='<p class="muted">回答終了後に更新されます</p>';
          }else{
            // 合計時間（秒）も表示（点数降順→時間昇順で並び済み）
            let html='<table><tr><th>順位</th><th>チーム名</th><th>合計点</th><th>合計時間(秒)</th></tr>';
            list.forEach((r,i)=>{
              const rank=i+1, badge=rank===1?' 🏆':(rank===2?' 🥈':(rank===3?' 🥉':''));
              const t = (r.totalTime??0).toFixed(1);
              html+=`<tr><td>${rank}${badge}</td><td>${r.teamName}</td><td>${r.totalPoints}</td><td>${t}</td></tr>`;
            });
            html+='</table>'; interimDiv.innerHTML=html;
          }
          refreshAnswerBtn();
        });

        conn.on("ShowAlert", m=>alert(m));
        conn.start().then(()=>conn.invoke("GetState")).catch(console.error);

        /* ===== 画面描画 ===== */
        function render(s){
          const q=s.question||{}; const opts=q.options||[]; const counts=s.counts||{};
          const clientVotes=s.clientVotes||{}; const isVotingOpen=s.isVotingOpen;

          qTitle.textContent=q.title||''; const idx0=s.currentIndex||0; qNum.textContent=idx0+1;

          // 問1は前へ非表示
          prevBtn.style.visibility = idx0===0 ? 'hidden' : 'visible';

          // 集計ボックス
          optsDiv.innerHTML='';
          for(const o of opts){
            const label=o.label??o.Label;
            const box=document.createElement('div');
            box.className='opt';
            box.innerHTML=`<div style="font-weight:800;margin:6px 0;">${label}</div><div class="num">${counts[label]??0}</div>`;
            optsDiv.appendChild(box);
          }

          displayClientStatus(clientVotes);

          if(isVotingOpen){
            startBtn.style.display='none'; stopBtn.style.display='inline-block';
            votingStatusDiv.innerHTML='<span class="status-indicator status-open"></span><span>回答受付中</span>';
            startTimer();
          }else{
            startBtn.style.display='inline-block'; stopBtn.style.display='none';
            votingStatusDiv.innerHTML='<span class="status-indicator status-closed"></span><span>回答受付停止中</span>';
            stopTimer();
          }

          prevBtn.disabled=!!isVotingOpen;
          nextBtn.disabled=!!isVotingOpen;

          // フラグ同期（設問が切り替わったら、その設問の確定有無で更新）
          isVotingOpenFlag = !!s.isVotingOpen;
          hasSnapshotForThisQuestion = !!questionResults[s.currentIndex||0];

          refreshAnswerBtn();
        }

        function displayClientStatus(clientVotes){
          const keys=Object.keys(clientVotes||{});
          if(keys.length===0){ clientStatusDiv.innerHTML='<p class="muted">まだ回答がありません</p>'; return; }
          let html='<table><tr><th>チーム名</th><th>選択</th><th>倍率</th><th>回答時間(秒)</th><th>操作</th></tr>';
          for(const k of keys){
            const d=clientVotes[k]||{};
            const team=(d.teamName||d.TeamName||'').trim()||k;
            const mul=d.multiplier||d.Multiplier||1;
            const opt=d.selectedOption||d.SelectedOption||'-';
            const tm = (d.responseTime||d.ResponseTime||0).toFixed(1);
            html+=`<tr>
              <td>${team}</td><td>${opt}</td>
              <td><span class="multiplier-badge multiplier-${mul}">×${mul}</span></td>
              <td>${tm}</td>
              <td><button class="delete-btn" onclick="deleteVoteByTeam('${team.replace(/'/g,"\\'")}')">削除</button></td>
            </tr>`;
          }
          html+='</table>'; clientStatusDiv.innerHTML=html;
        }

        function displayParticipants(list){
          if(!list || list.length===0){ participantsDiv.innerHTML='<p class="muted">まだ参加者がいません</p>'; return; }
          let html='<table><tr><th>チーム名</th><th>状態</th><th>選択</th><th>倍率</th><th>回答時間(秒)</th></tr>';
          list.forEach(p=>{
            const team=(p.teamName||p.TeamName||'').trim(); if(!team) return;
            const ok=p.hasAnswered||p.HasAnswered;
            const sel=p.selectedOption||p.SelectedOption||'-';
            const mul=p.multiplier||p.Multiplier||0;
            const tm=(p.responseTime||p.ResponseTime||0).toFixed(1);
            html+=`<tr><td>${team}</td><td>${ok?'回答済':'未回答'}</td><td>${ok?sel:'-'}</td><td>${ok?`×${mul}`:'-'}</td><td>${ok?tm:'-'}</td></tr>`;
          });
          html+='</table>'; participantsDiv.innerHTML=html;
        }

        function displayQuestionResults(index, results){
          if(!results || results.length===0){ questionResultsDiv.innerHTML='<p class="muted">結果なし</p>'; return; }
          let html=`<h3>問題${index+1}の結果</h3><table><tr><th>チーム名</th><th>選択</th><th>倍率</th><th>獲得点数</th><th>回答時間(秒)</th></tr>`;
          for(const r of results){
            const team=(r.teamName||r.TeamName||'').trim(); if(!team) continue;
            const t=(r.responseTime||r.ResponseTime||0).toFixed(1);
            html+=`<tr>
              <td>${team}</td>
              <td>${r.selectedOption||r.SelectedOption}</td>
              <td><span class="multiplier-badge multiplier-${r.multiplier||r.Multiplier}">×${r.multiplier||r.Multiplier}</span></td>
              <td>${r.points||r.Points||0}点</td>
              <td>${t}</td>
            </tr>`;
          }
          html+='</table>'; questionResultsDiv.innerHTML=html;
        }

        function displayFinalResults(results){
          if(!results || results.length===0) return;
          let html='<table><tr><th>順位</th><th>チーム名</th><th>合計点数</th><th>合計時間(秒)</th></tr>';
          results.forEach((r,i)=>{
            const rank=i+1, badge=rank===1?' 🏆':(rank===2?' 🥈':(rank===3?' 🥉':''));
            const team=(r.teamName||r.TeamName||'').trim(); if(!team) return;
            const t=(r.totalTime||r.TotalTime||0).toFixed(1);
            html+=`<tr><td>${rank}${badge}</td><td>${team}</td><td>${r.totalPoints||r.TotalPoints||0}点</td><td>${t}</td></tr>`;
          });
          html+='</table>';
          document.getElementById('final-results-content').innerHTML=html;
          document.getElementById('final-results-modal').style.display='block';
        }

        /* ===== Buttons ===== */
        document.getElementById('start-voting').onclick=()=>{
            const btn = document.getElementById('start-voting');
            btn.disabled = true;
            conn.invoke("StartVoting").finally(()=> btn.disabled = false);
        };
        document.getElementById('stop-voting').onclick =()=>{
            const btn = document.getElementById('stop-voting');
            btn.disabled = true;
            conn.invoke("StopVoting").finally(()=> btn.disabled = false);
        };
        document.getElementById('prev').onclick       =()=>{
            const btn = document.getElementById('prev');
            btn.disabled = true;
            conn.invoke("PrevQuestion").finally(()=> btn.disabled = false);
        };
        document.getElementById('next').onclick       =()=>{
            const btn = document.getElementById('next');
            btn.disabled = true;
            conn.invoke("NextQuestion").finally(()=> btn.disabled = false);
        };
        document.getElementById('reset').onclick      =()=>{
          if(confirm('すべてのデータをリセットしますか？')){
            conn.invoke("ResetCounts");
            currentState=null; questionResults={};
            hasSnapshotForThisQuestion=false; isVotingOpenFlag=false;
            questionResultsDiv.innerHTML='<p class="muted">回答終了後に表示されます</p>';
            stopTimer();
            if(answerBtn){ answerBtn.style.display='none'; answerBtn.disabled=true; }
          }
        };
        document.getElementById('close-answer-list').onclick=()=>{ document.getElementById('answer-list-modal').style.display='none'; };

        // 削除
        function deleteVoteByTeam(teamName){
          if(!teamName) return;
          if(confirm(`「${teamName}」の回答を削除しますか？`)){ conn.invoke("DeleteTeamVote", teamName); }
        }
    </script>
</body>
</html>
